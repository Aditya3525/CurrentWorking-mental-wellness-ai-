// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums for enhanced content management
enum ContentType {
  VIDEO
  AUDIO_MEDITATION
  BREATHING_EXERCISE
  ARTICLE
  STORY
  JOURNAL_PROMPT
  CBT_WORKSHEET
  YOGA_SEQUENCE
  MINDFULNESS_EXERCISE
  PSYCHOEDUCATION
  CRISIS_RESOURCE
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PracticeCategory {
  MEDITATION
  YOGA
  BREATHING
  MINDFULNESS
  JOURNALING
  CBT_TECHNIQUE
  GROUNDING_EXERCISE
  SELF_REFLECTION
  MOVEMENT
  SLEEP_HYGIENE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  googleId  String?  @unique
  firstName String?
  lastName  String?
  profilePhoto String?
  isOnboarded Boolean @default(false)
  isPremium   Boolean @default(false)
  approach    String? // 'western', 'eastern', 'hybrid'
  birthday    DateTime?
  gender      String?
  region      String?
  language    String?
  emergencyContact String?
  emergencyPhone   String?
  dataConsent      Boolean @default(false)
  clinicianSharing Boolean @default(false)
  securityQuestion   String?
  securityAnswerHash String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assessments    AssessmentResult[]
  moodEntries    MoodEntry[]
  planModules    UserPlanModule[]
  conversations  Conversation[]
  chatMessages   ChatMessage[]
  conversationMemory ConversationMemory?
  conversationGoals ConversationGoal[]
  progressTracking ProgressTracking[]
  assessmentInsight AssessmentInsight?
  assessmentSessions AssessmentSession[]
  contentEngagements ContentEngagement[]
  chatbotConversations ChatbotConversation[]
  dashboardInsights    DashboardInsights?
  
  @@index([email])
  @@index([googleId])
  @@index([isOnboarded])
  @@index([approach])
  @@index([createdAt])
  @@map("users")
}

model AssessmentResult {
  id              String   @id @default(cuid())
  userId          String
  assessmentType  String // 'anxiety_assessment', 'anxiety', 'stress', 'emotionalIntelligence', 'overthinking'
  score           Float
  responses       String   // Store all question responses as JSON string
  rawScore        Float?
  maxScore        Float?
  normalizedScore Float?
  categoryScores  Json?
  sessionId       String?
  completedAt     DateTime @default(now())

  // Relations
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  session AssessmentSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([assessmentType])
  @@index([userId, assessmentType])
  @@index([userId, completedAt])
  @@index([sessionId])
  @@index([completedAt])
  @@map("assessment_results")
}

model AssessmentSession {
  id            String   @id @default(cuid())
  userId        String
  selectedTypes Json
  status        String   @default("pending")
  startedAt     DateTime @default(now())
  completedAt   DateTime?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessments AssessmentResult[]

  @@index([userId])
  @@index([status])
  @@index([userId, status])
  @@map("assessment_sessions")
}

model AssessmentInsight {
  id            String   @id @default(cuid())
  userId        String   @unique
  summary       Json
  overallTrend  String
  aiSummary     String
  wellnessScore Float   @default(0) @map("wellness_score")
  updatedAt     DateTime
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assessment_insights")
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      String   // 'Great', 'Good', 'Okay', 'Struggling', 'Anxious'
  notes     String?
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([mood])
  @@map("mood_entries")
}

model PlanModule {
  id          String   @id @default(cuid())
  title       String
  type        String   // 'therapy', 'meditation', 'yoga', 'education'
  duration    String
  difficulty  String   // 'Beginner', 'Intermediate', 'Advanced'
  description String
  content     String   // Module content, exercises, etc. as JSON string
  approach    String   // 'western', 'eastern', 'hybrid'
  order       Int      // Display order
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userModules UserPlanModule[]
  
  @@index([approach])
  @@index([type])
  @@index([difficulty])
  @@index([order])
  @@map("plan_modules")
}

model UserPlanModule {
  id           String   @id @default(cuid())
  userId       String
  moduleId     String
  completed    Boolean  @default(false)
  progress     Float    @default(0)
  scheduledFor DateTime?
  completedAt  DateTime?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  module PlanModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
  @@index([userId, completed])
  @@index([scheduledFor])
  @@index([completed])
  @@map("user_plan_modules")
}

model Conversation {
  id            String   @id @default(cuid())
  userId        String
  title         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastMessageAt DateTime @default(now())
  isArchived    Boolean  @default(false)
  metadata      String?  // Store additional info as JSON string
  
  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  
  @@index([userId, lastMessageAt])
  @@index([userId, isArchived])
  @@index([lastMessageAt])
  @@map("conversations")
}

model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  content        String
  type           String   // 'user', 'bot', 'system'
  metadata       String?  // Store additional message data as JSON string
  createdAt      DateTime @default(now())
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([conversationId, createdAt])
  @@index([userId, createdAt])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("chat_messages")
}

model ConversationGoal {
  id          String   @id @default(cuid())
  userId      String
  goalType    String   // 'reduce_anxiety', 'improve_sleep', 'manage_stress', etc.
  title       String
  description String?
  targetValue Int?     // Optional numeric target
  currentValue Int?    // Current progress
  status      String   @default("active") // 'active', 'completed', 'paused'
  progress    Int      @default(0) // 0-100
  milestones  String   @default("[]") // JSON array of milestones
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([goalType])
  @@map("conversation_goals")
}

model ConversationMemory {
  id                   String   @id @default(cuid())
  userId               String   @unique
  topics               String   @default("{}") // Store topics with metadata as JSON string
  emotionalPatterns    String   @default("{}") // Store emotional patterns as JSON string
  importantMoments     String   @default("[]") // Store important conversation moments as JSON string
  conversationMetrics  String   @default("{}") // Store conversation style metrics as JSON string
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([updatedAt])
  @@map("conversation_memory")
}

model ProgressTracking {
  id         String   @id @default(cuid())
  userId     String
  metric     String   // 'anxiety', 'stress', 'mood', 'sleep', etc.
  value      Float
  date       DateTime @default(now())
  notes      String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([metric])
  @@index([userId, metric])
  @@index([userId, metric, date])
  @@index([date])
  @@map("progress_tracking")
}

model AssessmentDefinition {
  id           String  @id @default(cuid()) @map("assessment_id")
  name         String  @map("assessment_name")
  type         String  @map("assessment_type")
  category     String
  description  String?
  timeEstimate String? @map("time_estimate")
  isActive     Boolean @default(true) @map("is_active")

  questions AssessmentQuestion[]

  @@map("assessments")
}

model AssessmentQuestion {
  id           String @id @default(cuid()) @map("question_id")
  assessmentId String @map("assessment_id")
  text         String @map("question_text")
  order        Int    @map("question_order")
  responseType String @map("response_type")

  assessment AssessmentDefinition @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  options    ResponseOption[]

  @@map("questions")
}

model ResponseOption {
  id         String @id @default(cuid()) @map("option_id")
  questionId String @map("question_id")
  value      Float? @map("option_value")
  text       String @map("option_text")
  order      Int    @map("option_order")

  question AssessmentQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("response_options")
}

model Content {
  id          String   @id @default(cuid())
  title       String
  type        String   // Legacy field - will migrate to contentType enum
  contentType ContentType? // New enum-based type
  category    String   // 'anxiety', 'depression', 'mindfulness', etc.
  approach    String   // 'western', 'eastern', 'hybrid'
  content     String   // Article content or resource URL
  description String?  // Human-readable description / summary
  youtubeUrl  String?  // Optional YouTube link for video content
  thumbnailUrl String? // Optional thumbnail image URL
  duration    Int?     // Duration in seconds (changed from String)
  difficulty  String?  // Legacy field
  intensityLevel DifficultyLevel? // New enum-based difficulty
  tags        String   // Comma-separated tags
  focusAreas  String?  // JSON array of focus areas
  immediateRelief Boolean @default(false)
  crisisEligible  Boolean @default(false) // NEW: Can be used in crisis situations
  timeOfDay       String? // NEW: JSON array of recommended times ['morning','afternoon','evening','night']
  environment     String? // NEW: JSON array of suitable environments ['home','work','public','nature']
  culturalContext String?
  hasSubtitles    Boolean @default(false)
  transcript      String?
  completions     Int     @default(0)
  averageRating   Float?
  effectiveness   Float?
  isPublished Boolean  @default(false)
  sourceUrl   String?
  sourceName  String?
  confidence  Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  engagements ContentEngagement[]
  
  @@index([immediateRelief])
  @@index([isPublished])
  @@map("content")
}

model Practice {
  id          String   @id @default(cuid())
  title       String
  type        String   // Legacy field - 'meditation', 'breathing', 'yoga', 'sleep'
  category    PracticeCategory? // New enum-based category
  duration    Int      // Duration in minutes
  difficulty  String   // Legacy field - 'Beginner', 'Intermediate', 'Advanced'
  intensityLevel DifficultyLevel? // New enum-based difficulty
  approach    String   // 'Western', 'Eastern', 'Hybrid', 'All'
  format      String   // 'Audio', 'Video', 'Audio/Video'
  description String?
  audioUrl    String?
  videoUrl    String?
  youtubeUrl  String?
  thumbnailUrl String?
  tags        String?  // Comma-separated tags
  instructions String? // Practice instructions
  benefits    String?  // Practice benefits
  precautions String?  // Practice precautions/warnings
  focusAreas  String?  // NEW: JSON array of focus areas (matches Content)
  immediateRelief Boolean @default(false) // NEW: Quick relief flag (matches Content)
  crisisEligible  Boolean @default(false) // NEW: Can be used in crisis situations
  requiredEquipment String? // JSON array of required equipment
  environment       String? // JSON array of suitable environments ['home','work','public','nature']
  timeOfDay         String? // JSON array of recommended times ['morning','afternoon','evening','night']
  sensoryEngagement String? // JSON array of senses engaged
  steps             String? // JSON structured practice steps
  contraindications String? // JSON array of contraindications
  isPublished Boolean  @default(false)
  sourceUrl   String?
  sourceName  String?
  confidence  Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isPublished])
  @@map("practices")
}

model ContentEngagement {
  id          String   @id @default(cuid())
  userId      String
  contentId   String
  
  completed      Boolean   @default(false)
  rating         Int?      // 1-5 scale
  timeSpent      Int?      // seconds
  moodBefore     String?
  moodAfter      String?
  effectiveness  Int?      // 1-10 user-reported effectiveness
  notes          String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
  @@index([completed])
  @@map("content_engagements")
}

// NEW: Chatbot conversation tracking with AI-generated summaries
model ChatbotConversation {
  id        String   @id @default(cuid())
  userId    String
  
  // Conversation metadata
  startedAt DateTime @default(now())
  endedAt   DateTime?
  
  // Conversation content (JSON array of messages)
  messages  String   @default("[]") // JSON: [{role, content, timestamp}]
  
  // AI-generated summary and insights
  summary              String?  // AI-generated conversation summary
  summaryGeneratedAt   DateTime?
  emotionalState       String?  // e.g., "anxious", "hopeful", "overwhelmed"
  keyTopics            String   @default("[]") // JSON array: ["work stress", "sleep issues"]
  urgencyLevel         String?  // "low", "medium", "high"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, startedAt])
  @@index([userId, endedAt])
  @@index([userId])
  @@map("chatbot_conversations")
}

// NEW: Cached dashboard insights combining assessments + chatbot data
model DashboardInsights {
  id        String   @id @default(cuid())
  userId    String   @unique
  
  // Combined insights data (JSON object)
  insightsData String   // JSON: {assessments: {...}, chatbot: {...}, aiSummary: "..."}
  aiSummary    String   // AI-generated combined summary
  
  // Source tracking
  assessmentCount    Int       @default(0)
  chatCount          Int       @default(0)
  lastAssessmentDate DateTime?
  lastChatDate       DateTime?
  
  // Cache management
  generatedAt DateTime @default(now())
  expiresAt   DateTime // Daily expiration (midnight)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, expiresAt])
  @@index([userId])
  @@map("dashboard_insights")
}

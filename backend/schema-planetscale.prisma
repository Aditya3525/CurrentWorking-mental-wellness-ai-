// Prisma schema for PlanetScale (MySQL)
// Use this when deploying with PlanetScale

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  googleId  String?  @unique
  firstName String?
  lastName  String?
  profilePhoto String?
  
  // Profile fields
  isOnboarded      Boolean @default(false)
  approach         String? // 'western', 'eastern', 'hybrid'
  birthday         DateTime?
  gender           String?
  region           String?
  language         String? @default("en")
  emergencyContact String?
  emergencyPhone   String?
  dataConsent      Boolean @default(false)
  clinicianSharing Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  assessments Assessment[]
  plans       Plan[]
  progress    Progress[]
  chatSessions ChatSession[]

  @@map("users")
}

model Assessment {
  id     String @id @default(cuid())
  userId String
  type   String // 'initial', 'weekly', 'monthly'
  
  // Assessment data (JSON)
  responses Json
  score     Int?
  category  String? // 'anxiety', 'depression', 'stress', 'overall'
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("assessments")
}

model Plan {
  id          String @id @default(cuid())
  userId      String
  title       String
  description String? @db.Text
  type        String  // 'daily', 'weekly', 'custom'
  
  // Plan configuration
  activities Json
  duration   Int? // in days
  isActive   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@index([userId])
  @@map("plans")
}

model Progress {
  id        String @id @default(cuid())
  userId    String
  planId    String?
  date      DateTime @default(now())
  
  // Progress data
  activityType String
  completed    Boolean @default(false)
  duration     Int? // in minutes
  notes        String? @db.Text
  mood         Int? // 1-10 scale
  energy       Int? // 1-10 scale
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan? @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([planId])
  @@map("progress")
}

model ChatSession {
  id        String @id @default(cuid())
  userId    String
  title     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@index([userId])
  @@map("chat_sessions")
}

model ChatMessage {
  id            String @id @default(cuid())
  sessionId     String
  content       String @db.Text
  role          String // 'user', 'assistant'
  
  // AI metadata
  aiProvider    String? // 'openai', 'anthropic', 'gemini'
  aiModel       String?
  tokens        Int?
  
  createdAt DateTime @default(now())
  
  // Relations
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("chat_messages")
}

model Content {
  id          String @id @default(cuid())
  title       String
  description String? @db.Text
  content     String  @db.Text
  type        String  // 'article', 'exercise', 'meditation', 'video'
  category    String  // 'anxiety', 'depression', 'stress', 'sleep'
  
  // Metadata
  duration    Int? // in minutes
  difficulty  String? // 'beginner', 'intermediate', 'advanced'
  tags        Json?
  isPublished Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("content")
}
